[global_tags]
{% for key, value in telegraf_tags.items() %}
  {{ key }} = "{{ value }}"
{% endfor %}

[agent]
  interval = "10s"
  flush_jitter = "10s"
  round_interval = true
  metric_batch_size = 1000
  metric_buffer_limit = 1000000
  collection_jitter = "0s"
  hostname = "{{ inventory_hostname_short }}"

[[outputs.prometheus_client]]
  listen = ":9274"

{% for database in postgres_monitor_databases %}
[[inputs.postgresql_extensible]]
  address = "host=/var/run/postgresql user=postgres dbname={{database.name}}"
  databases = [{{database.name | to_json}}]


# database stats
[[inputs.postgresql_extensible.query]]
  measurement="postgres_databases"
  sqlquery="SELECT datname, numbackends, xact_commit, xact_rollback, blks_read, blks_hit, tup_returned, tup_fetched, tup_inserted, tup_updated, tup_deleted, conflicts, temp_files, temp_bytes, deadlocks, blk_read_time, blk_write_time FROM pg_stat_database where datname"
  version=901
  withdbname=true
  tagvalue="datname"

# table stats
[[inputs.postgresql_extensible.query]]
  measurement="postgres_table_stats"
  sqlquery="""
SELECT '{{database.name}}' AS datname, relname,
    n_live_tup, n_dead_tup,
    seq_scan, seq_tup_read, idx_scan, idx_tup_fetch,
    n_tup_ins, n_tup_upd, n_tup_del, n_tup_hot_upd,
    autovacuum_count
  FROM pg_stat_user_tables
  WHERE schemaname = 'public'
"""
  version=901
  withdbname=false
  tagvalue="relname,datname"

{% endfor %}

[[inputs.postgresql_extensible]]
  address = "host=/var/run/postgresql user=postgres dbname=postgres"
  databases = ["postgres"]

[[inputs.postgresql_extensible.query]]
  measurement="postgres_repmgr"
  sqlquery="""
SELECT Cast(NOT pg_is_in_recovery() as integer) as is_master;
"""
  version=901
  withdbname=false
  tagvalue=""


[[inputs.postgresql_extensible.query]]
  measurement="postgres_slowqueries"
  sqlquery="""
SELECT
  2 as duration, datname, COUNT(*) as quantity
FROM pg_stat_activity
WHERE (now() - pg_stat_activity.query_start) > interval '2 seconds' AND query != 'DISCARD ALL' AND state != 'idle' GROUP BY pg_stat_activity.datname UNION
SELECT
  5 as duration, datname, COUNT(*) as quantity
FROM pg_stat_activity
WHERE (now() - pg_stat_activity.query_start) > interval '5 seconds' AND query != 'DISCARD ALL' AND state != 'idle' GROUP BY pg_stat_activity.datname UNION
SELECT
  20 as duration, datname, COUNT(*) as quantity
FROM pg_stat_activity
WHERE (now() - pg_stat_activity.query_start) > interval '20 seconds' AND query != 'DISCARD ALL' AND state != 'idle' GROUP BY pg_stat_activity.datname UNION
SELECT
  60 as duration, datname, COUNT(*) as quantity
FROM pg_stat_activity
WHERE (now() - pg_stat_activity.query_start) > interval '60 seconds' AND query != 'DISCARD ALL' AND state != 'idle' GROUP BY pg_stat_activity.datname UNION
SELECT
  300 as duration, datname, COUNT(*) as quantity
FROM pg_stat_activity
WHERE (now() - pg_stat_activity.query_start) > interval '300 seconds' AND query != 'DISCARD ALL' AND state != 'idle' GROUP BY pg_stat_activity.datname UNION
SELECT
  600 as duration, datname, COUNT(*) as quantity
FROM pg_stat_activity
WHERE (now() - pg_stat_activity.query_start) > interval '600 seconds' AND query != 'DISCARD ALL' AND state != 'idle' GROUP BY pg_stat_activity.datname;
"""
  version=901
  withdbname=false
  tagvalue="duration,datname"


[[inputs.postgresql_extensible.query]]
  measurement="postgres_backends"
  sqlquery="""
SELECT
  state, datname, COUNT(*) as quantity
FROM pg_stat_activity
GROUP BY pg_stat_activity.datname, state;
"""
  version=901
  withdbname=false
  tagvalue="state,datname"
